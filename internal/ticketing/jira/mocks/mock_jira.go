// Code generated by MockGen. DO NOT EDIT.
// Source: intern/internal/ticketing/jira (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=internal/ticketing/jira/mocks/mock_jira.go -package=mocks intern/internal/ticketing/jira Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	ticketing "intern/internal/ticketing"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetTickets mocks base method.
func (m *MockClient) GetTickets(ctx context.Context, assignee, project string) ([]ticketing.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTickets", ctx, assignee, project)
	ret0, _ := ret[0].([]ticketing.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTickets indicates an expected call of GetTickets.
func (mr *MockClientMockRecorder) GetTickets(ctx, assignee, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTickets", reflect.TypeOf((*MockClient)(nil).GetTickets), ctx, assignee, project)
}

// HealthCheck mocks base method.
func (m *MockClient) HealthCheck(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockClientMockRecorder) HealthCheck(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockClient)(nil).HealthCheck), ctx)
}

// UpdateTicketStatus mocks base method.
func (m *MockClient) UpdateTicketStatus(ctx context.Context, ticketKey, status string, transitions map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTicketStatus", ctx, ticketKey, status, transitions)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTicketStatus indicates an expected call of UpdateTicketStatus.
func (mr *MockClientMockRecorder) UpdateTicketStatus(ctx, ticketKey, status, transitions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTicketStatus", reflect.TypeOf((*MockClient)(nil).UpdateTicketStatus), ctx, ticketKey, status, transitions)
}
